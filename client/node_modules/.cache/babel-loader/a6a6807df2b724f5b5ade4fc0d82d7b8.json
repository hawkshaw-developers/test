{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91701\\\\Desktop\\\\hookup\\\\test\\\\client\\\\src\\\\Menu\\\\Menu.js\";\nimport React, { Component } from 'react';\nimport \"./Menu.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactTable from 'react-table';\nimport '../../node_modules/react-table/react-table.css';\nimport Popup from \"reactjs-popup\";\nimport ExportToExcel from './ExportToExcel';\nimport { CSVLink } from \"react-csv\";\nimport ExcelReader from './ExcelReader';\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.modalClose = event => {\n      this.setState({\n        modalItemName: \"\",\n        modalRate: \"\",\n        modal: false\n      });\n      this.closePopup();\n    };\n\n    this.valueChangeHandler = newData => {\n      console.log(\"Before ------->\", this.state.testData);\n      this.setState({\n        testData: newData\n      });\n      console.log(\"Before ------->\", this.state.testData);\n      this.setState({\n        items: newData\n      });\n    };\n\n    this.handleCodeChange = event => {\n      console.log(\"code-->\", event.target.value);\n      this.setState({\n        codeValue: event.target.value,\n        showPopup: false\n      });\n    };\n\n    this.state = {\n      items: [{\n        id: \"1\",\n        name: \"item_1\",\n        rate: \"10\",\n        code: \"\"\n      }, {\n        id: \"2\",\n        name: \"item_2\",\n        rate: \"20\",\n        code: \"\"\n      }, {\n        id: \"3\",\n        name: \"item_3\",\n        rate: \"30\",\n        code: \"\"\n      }],\n      showPopup: false,\n      modal: false,\n      modalItemName: \"\",\n      modalRate: 0,\n      isEditMode: false,\n      testData: \"\",\n      codeValue: \"\"\n    };\n    this.renderEditable = this.renderEditable.bind(this);\n  }\n\n  handleNameChange(e) {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      modalItemName: value\n    });\n  }\n\n  handleRateChange(e) {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      modalRate: value\n    });\n  }\n\n  handleSubmit(e) {\n    let count = Object.keys(this.state.items).length;\n    console.log(\"The total number of objects in the json ---->\", count);\n    this.setState({\n      modalItemName: this.state.modalItemName,\n      modalRate: this.state.modalRate\n    });\n    this.modalClose();\n    console.log(this.state.modalItemName, this.state.modalRate);\n    let newItems = this.state.items;\n    newItems.push({\n      id: count + 1,\n      name: this.state.modalItemName,\n      rate: this.state.modalRate,\n      code: this.state.codeValue\n    });\n    this.setState({\n      items: newItems\n    });\n  }\n\n  deleteHandler(id) {\n    console.log(id + \" will be delete\");\n    const index = this.state.items.findIndex(p => {\n      return p.id === id;\n    });\n    console.log(\"Index-->\", index);\n    let newState = this.state.items.filter(p => {\n      return p.id !== id;\n    });\n    this.setState({\n      items: newState\n    });\n    console.log(\"new State \", newState);\n  }\n\n  editHandler() {\n    let currentState = this.state.isEditMode;\n    console.log(\"Current state of the mode--->\", currentState);\n    this.setState({\n      isEditMode: !this.state.isEditMode\n    });\n  }\n\n  renderEditable(cellInfo) {\n    if (this.state.isEditMode) {\n      return React.createElement(\"div\", {\n        style: {\n          backgroundColor: \"#fafafa\"\n        },\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        onBlur: e => {\n          const data = this.state.items[cellInfo.original.id];\n          let originalState = JSON.parse(JSON.stringify(this.state.items));\n          console.log(\"Data ------>>>\", data);\n          originalState[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n          this.setState({\n            items: originalState\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.items[cellInfo.index][cellInfo.column.id]);\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.items[cellInfo.index][cellInfo.column.id]);\n    }\n  }\n\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  closePopup() {\n    this.setState({\n      showPopup: false\n    });\n  }\n\n  openPopup() {\n    this.setState({\n      showPopup: true\n    });\n  }\n\n  render() {\n    console.log(this.props.myEvent);\n    let columns = [{\n      Header: \"S No\",\n      accessor: \"id\",\n      sortable: false,\n      width: 100\n    }, {\n      Header: \"Item Code\",\n      accessor: \"name\",\n      sortable: true,\n      filterable: true,\n      width: 100,\n      Cell: this.renderEditable\n    }, {\n      Header: \"Rate\",\n      accessor: \"rate\",\n      sortable: false,\n      width: 100,\n      Cell: this.renderEditable\n    }, {\n      Header: \"Code\",\n      accessor: \"code\",\n      sortable: false,\n      width: 100,\n      Cell: this.renderEditable\n    }, {\n      Header: \"Actions\",\n      Cell: props => {\n        return React.createElement(\"button\", {\n          class: \"btn btn-sm\",\n          onClick: () => {\n            this.deleteHandler(props.original.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          class: \"fa fa-trash fa-lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }));\n      }\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      trigger: React.createElement(\"button\", {\n        class: \"button btn btn-ghost-primary active\",\n        onClick: this.openPopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \" Add Data \"),\n      modal: true,\n      closeOnDocumentClick: true,\n      className: \"popup\",\n      open: this.state.showPopup,\n      onClose: this.closePopup.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"close\",\n      onClick: this.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Add Data Here\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.modalItemName,\n      name: \"modalItemName\",\n      onChange: e => this.handleNameChange(e),\n      id: \"code\",\n      type: \"text\",\n      placeholder: \"item_code\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.modalRate,\n      name: \"modalRate\",\n      onChange: e => this.handleRateChange(e),\n      id: \"price\",\n      type: \"text\",\n      placeholder: \"item_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.codeValue,\n      name: \"codeValue\",\n      onChange: e => this.handleCodeChange(e),\n      id: \"codeValue\",\n      placeholder: \"code\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: e => this.handleSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Save\"), React.createElement(\"button\", {\n      onClick: this.modalClose.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Cancel\")))), React.createElement(\"button\", {\n      class: \"btn btn-ghost-primary active\",\n      onClick: this.editHandler.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.state.isEditMode ? \"Cancel\" : \"Edit\"), React.createElement(ExcelReader, {\n      onValueChange: this.valueChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(ReactTable, {\n      columns: columns,\n      data: this.state.items,\n      defaultPageSize: 5,\n      showPagination: false,\n      getTrProps: this.onRowClick,\n      className: \"table table-responsive-sm table-striped\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(ExportToExcel, {\n      posts: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(CSVLink, {\n      data: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Download CSV\"));\n  }\n\n}\n\nexport default Menu;","map":{"version":3,"sources":["C:/Users/91701/Desktop/hookup/test/client/src/Menu/Menu.js"],"names":["React","Component","ReactTable","Popup","ExportToExcel","CSVLink","ExcelReader","Menu","constructor","props","modalClose","event","setState","modalItemName","modalRate","modal","closePopup","valueChangeHandler","newData","console","log","state","testData","items","handleCodeChange","target","value","codeValue","showPopup","id","name","rate","code","isEditMode","renderEditable","bind","handleNameChange","e","handleRateChange","handleSubmit","count","Object","keys","length","newItems","push","deleteHandler","index","findIndex","p","newState","filter","editHandler","currentState","cellInfo","backgroundColor","data","original","originalState","JSON","parse","stringify","column","innerHTML","togglePopup","openPopup","render","myEvent","columns","Header","accessor","sortable","width","filterable","Cell","closeModal","onRowClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Menu.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactTable from 'react-table';\r\nimport '../../node_modules/react-table/react-table.css';\r\nimport Popup from \"reactjs-popup\";\r\nimport ExportToExcel from './ExportToExcel';\r\nimport { CSVLink } from \"react-csv\";\r\nimport ExcelReader from './ExcelReader';\r\n\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [\r\n                {\r\n                    id: \"1\", name: \"item_1\", rate: \"10\",code:\"\"\r\n                }, {\r\n                    id: \"2\", name: \"item_2\", rate: \"20\",code:\"\"\r\n                }, {\r\n                    id: \"3\", name: \"item_3\", rate: \"30\",code:\"\"\r\n                }\r\n            ],\r\n            showPopup: false,\r\n            modal:false,\r\n\r\n            modalItemName: \"\",\r\n            modalRate:0,\r\n            isEditMode:false,\r\n            testData:\"\",\r\n            codeValue:\"\"\r\n        }\r\n        this.renderEditable = this.renderEditable.bind(this);\r\n    }\r\n    handleNameChange(e) {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n\r\n        this.setState({\r\n          modalItemName: value\r\n        });\r\n      }\r\n      handleRateChange(e) {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n\r\n        this.setState({\r\n          modalRate: value\r\n        });\r\n      }\r\n\r\n      handleSubmit(e) {\r\n          let count=Object.keys(this.state.items).length;\r\n          console.log(\"The total number of objects in the json ---->\",count);\r\n        this.setState({ modalItemName: this.state.modalItemName,modalRate:this.state.modalRate });\r\n        this.modalClose();\r\n        console.log(this.state.modalItemName,this.state.modalRate);\r\n        let newItems = this.state.items;\r\n        newItems.push({\r\n            id:count+1,\r\n            name:this.state.modalItemName,\r\n            rate:this.state.modalRate,\r\n            code:this.state.codeValue\r\n\r\n        });\r\n        this.setState({items:newItems});\r\n\r\n      }\r\n\r\n      modalClose=(event)=> {\r\n        this.setState({\r\n            modalItemName: \"\",\r\n            modalRate:\"\",\r\n            modal: false\r\n        });\r\n        this.closePopup();\r\n      }\r\n\r\n    deleteHandler(id) {\r\n        console.log(id + \" will be delete\");\r\n        const index = this.state.items.findIndex(p => {\r\n            return p.id === id;\r\n        });\r\n        console.log(\"Index-->\", index);\r\n        let newState = this.state.items.filter(p => {\r\n            return p.id !== id;\r\n        });\r\n\r\n        this.setState({ items: newState });\r\n\r\n\r\n        console.log(\"new State \", newState);\r\n    }\r\n\r\n    editHandler(){\r\n\r\n        let currentState = this.state.isEditMode;\r\n        console.log(\"Current state of the mode--->\",currentState);\r\n        this.setState({isEditMode:!this.state.isEditMode});\r\n    }\r\n\r\n\r\n    renderEditable(cellInfo) {\r\n        if(this.state.isEditMode){\r\n\r\n            return (\r\n                <div\r\n                  style={{ backgroundColor: \"#fafafa\" }}\r\n                  contentEditable\r\n                  suppressContentEditableWarning\r\n                  onBlur={e => {\r\n                    const data = this.state.items[cellInfo.original.id];\r\n                    let originalState = JSON.parse(JSON.stringify(this.state.items));\r\n                      console.log(\"Data ------>>>\",data);\r\n                    originalState[cellInfo.index][cellInfo.column.id]  =e.target.innerHTML;\r\n                    this.setState({ items:originalState });\r\n                  }}\r\n              >{this.state.items[cellInfo.index][cellInfo.column.id]}</div>\r\n              );\r\n\r\n        }\r\n        else{\r\n            return(\r\n                <div>{this.state.items[cellInfo.index][cellInfo.column.id]}</div>\r\n            );\r\n        }\r\n\r\n      }\r\n      valueChangeHandler=(newData)=>{\r\n          console.log(\"Before ------->\",this.state.testData);\r\n          this.setState({testData:newData});\r\n\r\n          console.log(\"Before ------->\",this.state.testData);\r\n          this.setState({\r\n              items:newData\r\n          })\r\n      }\r\n      handleCodeChange=(event)=>{\r\n          console.log(\"code-->\",event.target.value);\r\n          this.setState({codeValue:event.target.value\r\n        ,showPopup:false\r\n        });\r\n      }\r\n      togglePopup(){\r\n          this.setState({showPopup:!this.state.showPopup});\r\n      }\r\n      closePopup(){\r\n          this.setState({showPopup:false});\r\n      }\r\n      openPopup(){\r\n          this.setState({showPopup:true});\r\n      }\r\n\r\n    render() {\r\n        console.log(this.props.myEvent);\r\n\r\n        let columns = [\r\n            {\r\n                Header: \"S No\",\r\n                accessor: \"id\",\r\n                sortable: false,\r\n                width: 100\r\n\r\n            },\r\n            {\r\n                Header: \"Item Code\",\r\n                accessor: \"name\",\r\n                sortable: true,\r\n                filterable: true,\r\n                width: 100,\r\n                Cell: this.renderEditable\r\n            },\r\n            {\r\n                Header: \"Rate\",\r\n                accessor: \"rate\",\r\n                sortable: false,\r\n                width: 100,\r\n                Cell: this.renderEditable\r\n            },\r\n            {\r\n                Header: \"Code\",\r\n                accessor: \"code\",\r\n                sortable: false,\r\n                width: 100,\r\n                Cell: this.renderEditable\r\n            },\r\n            {\r\n                Header: \"Actions\",\r\n                Cell: props => {\r\n                    return (<button class=\"btn btn-sm\" onClick={() => {\r\n                        this.deleteHandler(props.original.id);\r\n                    }}><i class=\"fa fa-trash fa-lg\"></i></button>);\r\n                }\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n            <div>\r\n\r\n                <Popup\r\n\r\n                    trigger={<button class=\"button btn btn-ghost-primary active\"  onClick={this.openPopup}> Add Data </button>}\r\n\r\n                    modal\r\n                    closeOnDocumentClick\r\n                   className=\"popup\"\r\n                   open={this.state.showPopup}\r\n                   onClose={this.closePopup.bind(this)}\r\n                >\r\n                   <div className=\"modal\">\r\n                   <a className=\"close\" onClick={this.closeModal}>\r\n              &times;\r\n            </a>\r\n                       <span>Add Data Here</span><br></br>\r\n                    <input value={this.state.modalItemName}\r\n              name=\"modalItemName\"\r\n              onChange={e => this.handleNameChange(e)} id=\"code\" type=\"text\" placeholder=\"item_code\"></input><br></br>\r\n                    <input\r\n                    value={this.state.modalRate}\r\n                    name=\"modalRate\"\r\n                    onChange={e => this.handleRateChange(e)}\r\n                    id=\"price\" type=\"text\" placeholder=\"item_price\"></input><br></br>\r\n                    <input value={this.state.codeValue} name=\"codeValue\" onChange={e=> this.handleCodeChange(e)} id=\"codeValue\" placeholder=\"code\">\r\n\r\n                    </input><br></br>\r\n                    <button onClick={e => this.handleSubmit(e)} >Save</button>\r\n                    <button onClick={this.modalClose.bind(this)}>Cancel</button>\r\n                    </div>\r\n                </Popup>\r\n                </div>\r\n\r\n                <button  class=\"btn btn-ghost-primary active\"onClick={this.editHandler.bind(this)}>{this.state.isEditMode?\"Cancel\":\"Edit\"}</button>\r\n\r\n                <ExcelReader onValueChange ={this.valueChangeHandler}/>\r\n\r\n                <ReactTable\r\n                    columns={columns}\r\n                    data={this.state.items}\r\n                    defaultPageSize={5}\r\n                    showPagination={false}\r\n                    getTrProps={this.onRowClick}\r\n                    className=\"table table-responsive-sm table-striped\"\r\n\r\n                >\r\n\r\n                </ReactTable>\r\n                <ExportToExcel posts={this.state.items}/>\r\n                <CSVLink data={this.state.items}>Download CSV</CSVLink>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Menu;\r\n"]},"metadata":{},"sourceType":"module"}